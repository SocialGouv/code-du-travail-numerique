{"version":3,"sources":["../../../src/routes/glossary/index.js"],"sourcesContent":["import elasticsearchClient from \"../../conf/elasticsearch\";\nimport { API_BASE_URL, CDTN_ADMIN_VERSION } from \"../v1.prefix\";\nimport getGlossaryBody from \"./glossary.elastic\";\n\nconst Router = require(\"koa-router\");\nconst { DOCUMENTS } = require(\"@socialgouv/cdtn-elasticsearch\");\nconst memoizee = require(\"memoizee\");\n\nconst ES_INDEX_PREFIX = process.env.ES_INDEX_PREFIX || \"cdtn\";\nconst index = `${ES_INDEX_PREFIX}-${CDTN_ADMIN_VERSION}_${DOCUMENTS}`;\n\nconst router = new Router({ prefix: API_BASE_URL });\n\nasync function _getGlossaryData() {\n  const body = getGlossaryBody();\n\n  const response = await elasticsearchClient.search({ body, index });\n  return response;\n}\n\nconst getGlossary = memoizee(_getGlossaryData, {\n  maxAge: 1000 * 5 * 60,\n  preFetch: true,\n  promise: true,\n});\n\n/**\n * Return glossary terms that match a given slug\n *\n * @example\n * http://localhost:1337/api/v1/glossary\n *\n * @returns {Object} An object containing glossary terms .\n */\n\nrouter.get(\"/glossary\", async (ctx) => {\n  const response = await getGlossary();\n\n  if (response.body.hits.total.value === 0) {\n    ctx.throw(404, `there is no glossary data`);\n  }\n  const glossaryData = response.body.hits.hits[0]._source.data;\n\n  ctx.body = glossaryData;\n});\n\n/**\n * Return glossary terms that match a given slug\n *\n * @example\n * http://localhost:1337/api/v1/glossary/convention-collective\n *\n * @returns {Object} An object containing glossary terms .\n */\nrouter.get(\"/glossary/:slug\", async (ctx) => {\n  const { slug } = ctx.params;\n  const response = await getGlossary();\n\n  if (response.body.hits.total.value === 0) {\n    ctx.throw(404, `there is no highlights data`);\n  }\n  const glossaryData = response.body.hits.hits[0]._source.data;\n\n  const [term] = glossaryData.filter((term) => slug === term.slug);\n  if (!term) {\n    ctx.throw(404, `there is no glossary term that match slug ${slug}`);\n  }\n  ctx.body = { ...term };\n});\n\nexport default router;\n"],"names":["elasticsearchClient","API_BASE_URL","CDTN_ADMIN_VERSION","getGlossaryBody","Router","require","DOCUMENTS","memoizee","ES_INDEX_PREFIX","process","env","index","router","prefix","_getGlossaryData","body","response","search","getGlossary","maxAge","preFetch","promise","get","ctx","hits","total","value","throw","glossaryData","_source","data","slug","params","term","filter"],"mappings":"AAAA,OAAOA,yBAAyB,2BAA2B;AAC3D,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,eAAe;AAChE,OAAOC,qBAAqB,qBAAqB;AAEjD,MAAMC,SAASC,QAAQ;AACvB,MAAM,EAAEC,UAAS,EAAE,GAAGD,QAAQ;AAC9B,MAAME,WAAWF,QAAQ;AAEzB,MAAMG,kBAAkBC,QAAQC,GAAG,CAACF,eAAe,IAAI;AACvD,MAAMG,QAAQ,CAAC,EAAEH,gBAAgB,CAAC,EAAEN,mBAAmB,CAAC,EAAEI,UAAU,CAAC;AAErE,MAAMM,SAAS,IAAIR,OAAO;IAAES,QAAQZ;AAAa;AAEjD,eAAea,mBAAmB;IAChC,MAAMC,OAAOZ;IAEb,MAAMa,WAAW,MAAMhB,oBAAoBiB,MAAM,CAAC;QAAEF;QAAMJ;IAAM;IAChE,OAAOK;AACT;AAEA,MAAME,cAAcX,SAASO,kBAAkB;IAC7CK,QAAQ,OAAO,IAAI;IACnBC,UAAU,IAAI;IACdC,SAAS,IAAI;AACf;AAEA;;;;;;;CAOC,GAEDT,OAAOU,GAAG,CAAC,aAAa,OAAOC,MAAQ;IACrC,MAAMP,WAAW,MAAME;IAEvB,IAAIF,SAASD,IAAI,CAACS,IAAI,CAACC,KAAK,CAACC,KAAK,KAAK,GAAG;QACxCH,IAAII,KAAK,CAAC,KAAK,CAAC,yBAAyB,CAAC;IAC5C,CAAC;IACD,MAAMC,eAAeZ,SAASD,IAAI,CAACS,IAAI,CAACA,IAAI,CAAC,EAAE,CAACK,OAAO,CAACC,IAAI;IAE5DP,IAAIR,IAAI,GAAGa;AACb;AAEA;;;;;;;CAOC,GACDhB,OAAOU,GAAG,CAAC,mBAAmB,OAAOC,MAAQ;IAC3C,MAAM,EAAEQ,KAAI,EAAE,GAAGR,IAAIS,MAAM;IAC3B,MAAMhB,WAAW,MAAME;IAEvB,IAAIF,SAASD,IAAI,CAACS,IAAI,CAACC,KAAK,CAACC,KAAK,KAAK,GAAG;QACxCH,IAAII,KAAK,CAAC,KAAK,CAAC,2BAA2B,CAAC;IAC9C,CAAC;IACD,MAAMC,eAAeZ,SAASD,IAAI,CAACS,IAAI,CAACA,IAAI,CAAC,EAAE,CAACK,OAAO,CAACC,IAAI;IAE5D,MAAM,CAACG,KAAK,GAAGL,aAAaM,MAAM,CAAC,CAACD,OAASF,SAASE,KAAKF,IAAI;IAC/D,IAAI,CAACE,MAAM;QACTV,IAAII,KAAK,CAAC,KAAK,CAAC,0CAA0C,EAAEI,KAAK,CAAC;IACpE,CAAC;IACDR,IAAIR,IAAI,GAAG;QAAE,GAAGkB,IAAI;IAAC;AACvB;AAEA,eAAerB,OAAO"}