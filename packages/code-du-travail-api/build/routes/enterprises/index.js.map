{"version":3,"sources":["../../../src/routes/enterprises/index.ts"],"sourcesContent":["import { DOCUMENTS } from \"@socialgouv/cdtn-elasticsearch\";\nimport Router from \"koa-router\";\nimport fetch from \"node-fetch\";\n\nimport elasticsearchClient from \"../../conf/elasticsearch\";\nimport type { SearchResponse } from \"../type\";\nimport { API_BASE_URL, CDTN_ADMIN_VERSION } from \"../v1.prefix\";\nimport getAgreements from \"./enterprises.elastic\";\nimport type { Agreement, ApiEnterpriseData, Enterprise } from \"./types\";\n\nconst ES_INDEX_PREFIX = process.env.ES_INDEX_PREFIX ?? \"cdtn\";\nconst index = `${ES_INDEX_PREFIX}-${CDTN_ADMIN_VERSION}_${DOCUMENTS}`;\n\nconst router = new Router({ prefix: API_BASE_URL });\nconst ENTERPRISE_API_URL =\n  \"https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1\";\n\n/**\n * Agreement type from @socialgouv/kali-data/data/index.json\n */\ntype Convention = {\n  idcc: number;\n  shortTitle: string;\n  id: string;\n  title: string;\n  url?: string;\n};\n\ntype EnterpriseApiResponse = {\n  entreprises?: (Omit<Enterprise, \"conventions\"> & {\n    conventions: Convention[];\n  })[];\n};\n\nconst toAgreement = (convention: Convention): Agreement => ({\n  id: convention.id,\n  num: convention.idcc,\n  shortTitle: convention.shortTitle,\n  title: convention.title,\n  ...(convention.url ? { url: convention.url } : {}),\n});\n\nconst populateAgreements = async (\n  enterpriseApiResponse: EnterpriseApiResponse\n): Promise<ApiEnterpriseData> => {\n  const idccList: number[] =\n    enterpriseApiResponse.entreprises?.flatMap((enterprise) =>\n      enterprise.conventions.flatMap((convention) => convention.idcc)\n    ) ?? [];\n\n  if (idccList.length > 0) {\n    const body = getAgreements(idccList);\n    const response = await elasticsearchClient.search<\n      SearchResponse<Agreement>\n    >({ body, index });\n\n    if (response.body.hits.total.value > 0) {\n      const agreements = response.body.hits.hits.reduce(\n        (acc: Record<number, Agreement>, curr) => {\n          acc[curr._source.num] = curr._source;\n          return acc;\n        },\n        {}\n      );\n      return {\n        ...enterpriseApiResponse,\n        entreprises: enterpriseApiResponse.entreprises?.map((enterprise) => ({\n          ...enterprise,\n          conventions: enterprise.conventions.map(\n            (convention): Agreement =>\n              agreements[convention.idcc] ?? toAgreement(convention)\n          ),\n        })),\n      };\n    }\n  }\n  return {\n    ...enterpriseApiResponse,\n    entreprises: enterpriseApiResponse.entreprises?.map((enterprise) => ({\n      ...enterprise,\n      conventions: enterprise.conventions.map(toAgreement),\n    })),\n  };\n};\n\nconst makeSearchUrl = (query: string, address: string) => {\n  const params: { k: string; v: string }[] = [\n    { k: \"ranked\", v: \"true\" },\n    { k: \"query\", v: encodeURIComponent(query) },\n    { k: \"address\", v: encodeURIComponent(address) },\n    { k: \"convention\", v: \"true\" },\n    { k: \"employer\", v: \"true\" },\n    { k: \"open\", v: \"true\" },\n    { k: \"matchingLimit\", v: \"0\" },\n  ];\n\n  const flattenParams = params\n    .map(({ k, v }) => (k && v ? `${k}=${v}` : undefined))\n    .filter((qp) => qp)\n    .join(\"&\");\n\n  return `${ENTERPRISE_API_URL}/search?${flattenParams}`;\n};\n\nrouter.get(\"/enterprises\", async (ctx) => {\n  if (\n    !ctx.request.query.q ||\n    typeof ctx.request.query.q !== \"string\" ||\n    (ctx.request.query.a && typeof ctx.request.query.a !== \"string\")\n  ) {\n    ctx.status = 400;\n    return;\n  }\n  const query: string = ctx.request.query.q;\n  const address: string = ctx.request.query.a || \"\";\n  if (query) {\n    const url = makeSearchUrl(query, address);\n\n    const response = await fetch(url);\n\n    if (response.status === 200) {\n      const jsonResponse: EnterpriseApiResponse = await response.json();\n      ctx.body = await populateAgreements(jsonResponse);\n    } else {\n      ctx.status = response.status;\n      ctx.body = response.body;\n    }\n  }\n});\n\nexport default router;\n"],"names":["DOCUMENTS","Router","fetch","elasticsearchClient","API_BASE_URL","CDTN_ADMIN_VERSION","getAgreements","ES_INDEX_PREFIX","process","env","index","router","prefix","ENTERPRISE_API_URL","toAgreement","convention","id","num","idcc","shortTitle","title","url","populateAgreements","enterpriseApiResponse","idccList","entreprises","flatMap","enterprise","conventions","length","body","response","search","hits","total","value","agreements","reduce","acc","curr","_source","map","makeSearchUrl","query","address","params","k","v","encodeURIComponent","flattenParams","undefined","filter","qp","join","get","ctx","request","q","a","status","jsonResponse","json"],"mappings":"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"}