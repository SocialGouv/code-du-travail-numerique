{"version":3,"sources":["../../../src/routes/items/getRelatedItems.js"],"sourcesContent":["import elasticsearchClient from \"../../conf/elasticsearch\";\n\nconst { SOURCES, getSourceByRoute } = require(\"@socialgouv/cdtn-sources\");\nconst { DOCUMENTS, vectorizeQuery } = require(\"@socialgouv/cdtn-elasticsearch\");\nconst getSearchBody = require(\"./searchBySourceSlug.elastic\");\nconst getSemBody = require(\"../search/search.sem\");\nconst utils = require(\"../search/utils\");\nconst getRelatedItemsBody = require(\"./relatedItems.elastic\");\nconst { logger } = require(\"@socialgouv/cdtn-logger\");\nconst { CDTN_ADMIN_VERSION } = require(\"../v1.prefix.js\");\n\nconst MAX_RESULTS = 4;\n\nconst ES_INDEX_PREFIX = process.env.ES_INDEX_PREFIX || \"cdtn\";\nconst index = `${ES_INDEX_PREFIX}-${CDTN_ADMIN_VERSION}_${DOCUMENTS}`;\n\n// standard related items :\nconst sources = [\n  SOURCES.TOOLS,\n  SOURCES.SHEET_SP,\n  SOURCES.SHEET_MT,\n  SOURCES.LETTERS,\n  SOURCES.CONTRIBUTIONS,\n  SOURCES.EXTERNALS,\n];\n\n// select certain fields and add recommendation source (covisits or search)\nconst mapSource =\n  (reco) =>\n  ({ action, description, icon, slug, source, subtitle, title, url }) => ({\n    action,\n    description,\n    icon,\n    reco,\n    slug,\n    source,\n    subtitle,\n    title,\n    url,\n  });\n\n// rely on covisit links within the item, computed offline from usage logs (Monolog)\nasync function getCovisitedItems({ covisits }) {\n  // covisits as related items\n  const body = covisits.flatMap(({ link }) => {\n    const [route, slug] = link.split(\"/\");\n    const source = getSourceByRoute(route);\n    if (!(slug && source)) {\n      logger.error(`Unknown covisit : ${link}`);\n      return [];\n    } else {\n      return [{ index }, getSearchBody({ slug, source })];\n    }\n  });\n\n  const esCovisits = await elasticsearchClient\n    .msearch({\n      body,\n    })\n    .then((resp) =>\n      resp.body.responses.map((r) => r.hits.hits[0]).filter((r) => r)\n    )\n    .catch((err) => {\n      logger.error(\n        \"Error when querying covisits : \" + JSON.stringify(err.meta.body)\n      );\n      return [];\n    });\n\n  const covisitedItems = esCovisits\n    // we filter fields and add some info about recommandation type for evaluation purpose\n    .map(({ _source }) => mapSource(\"covisits\")(_source))\n    .slice(0, MAX_RESULTS);\n\n  return covisitedItems;\n}\n\n// use search based on item title : More Like This & Semantic\nasync function getSearchBasedItems({ title, settings }) {\n  const relatedItemBody = getRelatedItemsBody({ settings, sources });\n  const requestBodies = [{ index }, relatedItemBody];\n\n  const query_vector = await vectorizeQuery(title.toLowerCase()).catch(\n    (error) => {\n      logger.error(error.message);\n    }\n  );\n\n  if (query_vector) {\n    const semBody = getSemBody({\n      query_vector,\n      // we +1 the size to remove the document source that should match perfectly for the given vector\n      size: MAX_RESULTS + 1,\n      sources,\n    });\n    // we use relatedItem query _source to have the same prop returned\n    // for both request\n    // semBody._source = relatedItemBody._source;\n    requestBodies.push({ index }, semBody);\n  }\n\n  const {\n    body: {\n      responses: [esResponse = {}, semResponse = {}],\n    },\n  } = await elasticsearchClient.msearch({ body: requestBodies });\n\n  const { hits: { hits: semanticHits } = { hits: [] } } = semResponse;\n  const { hits: { hits: fullTextHits } = { hits: [] } } = esResponse;\n\n  return (\n    utils\n      .mergePipe(fullTextHits, semanticHits, MAX_RESULTS)\n      // we filter fields and add some info about recommandation type for evaluation purpose\n      .map(({ _source }) => mapSource(\"search\")(_source))\n  );\n}\n\n// get related items, depending on : covisits present & non empty\nasync function getRelatedItems({ title, settings, slug, covisits }) {\n  const covisitedItems = covisits\n    ? await getCovisitedItems({ covisits, slug })\n    : [];\n\n  const searchBasedItems = await getSearchBasedItems({ settings, slug, title });\n\n  const filteredItems = covisitedItems\n    .concat(searchBasedItems)\n    // avoid elements already visible within the item as fragments\n    .filter((item) => !slug.startsWith(item.slug.split(\"#\")[0]))\n    // only return sources of interest\n    .filter(({ source }) => sources.includes(source))\n    // drop duplicates (between covisits and search) using source/slug\n    .reduce((acc, related) => {\n      const key = related.source + related.slug;\n      if (!acc.has(key)) acc.set(key, related);\n      return acc;\n    }, new Map())\n    .values();\n\n  return Array.from(filteredItems).slice(0, MAX_RESULTS);\n}\n\nmodule.exports = {\n  getRelatedItems,\n};\n"],"names":["elasticsearchClient","SOURCES","getSourceByRoute","require","DOCUMENTS","vectorizeQuery","getSearchBody","getSemBody","utils","getRelatedItemsBody","logger","CDTN_ADMIN_VERSION","MAX_RESULTS","ES_INDEX_PREFIX","process","env","index","sources","TOOLS","SHEET_SP","SHEET_MT","LETTERS","CONTRIBUTIONS","EXTERNALS","mapSource","reco","action","description","icon","slug","source","subtitle","title","url","getCovisitedItems","covisits","body","flatMap","link","route","split","error","esCovisits","msearch","then","resp","responses","map","r","hits","filter","catch","err","JSON","stringify","meta","covisitedItems","_source","slice","getSearchBasedItems","settings","relatedItemBody","requestBodies","query_vector","toLowerCase","message","semBody","size","push","esResponse","semResponse","semanticHits","fullTextHits","mergePipe","getRelatedItems","searchBasedItems","filteredItems","concat","item","startsWith","includes","reduce","acc","related","key","has","set","Map","values","Array","from","module","exports"],"mappings":"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"}