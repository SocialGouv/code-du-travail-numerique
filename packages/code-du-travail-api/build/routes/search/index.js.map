{"version":3,"sources":["../../../src/routes/search/index.js"],"sourcesContent":["import elasticsearchClient from \"../../conf/elasticsearch\";\nimport { API_BASE_URL, CDTN_ADMIN_VERSION } from \"../v1.prefix\";\n\nconst Router = require(\"koa-router\");\nconst { SOURCES } = require(\"@socialgouv/cdtn-sources\");\nconst { DOCUMENTS, vectorizeQuery } = require(\"@socialgouv/cdtn-elasticsearch\");\nconst getPrequalifiedResults = require(\"./searchPrequalifiedResults\");\nconst getSearchBody = require(\"./search.elastic\");\nconst getSemBody = require(\"./search.sem\");\nconst getRelatedThemesBody = require(\"./searchRelatedThemes.elastic\");\nconst getRelatedArticlesBody = require(\"./searchRelatedArticles.elastic\");\nconst { removeDuplicate, merge, mergePipe } = require(\"./utils\");\nconst { logger } = require(\"@socialgouv/cdtn-logger\");\n\nconst ES_INDEX_PREFIX = process.env.ES_INDEX_PREFIX || \"cdtn\";\nconst index = `${ES_INDEX_PREFIX}-${CDTN_ADMIN_VERSION}_${DOCUMENTS}`;\n\nconst MAX_RESULTS = 100;\nconst DEFAULT_RESULTS_NUMBER = 25;\nconst THEMES_RESULTS_NUMBER = 5;\nconst CDT_RESULTS_NUMBER = 5;\nconst SEMANTIC_THRESHOLD = 1.11;\n\nconst router = new Router({ prefix: API_BASE_URL });\n\nconst DOCUMENTS_SEM = \"documents_sem\";\nconst DOCUMENTS_ES = \"documents_es\";\nconst THEMES_ES = \"themes_es\";\nconst THEMES_SEM = \"themes_sem\";\nconst CDT_ES = \"cdt_es\";\n\n/**\n * Return documents matching the given query.\n *\n * @example\n * http://localhost:1337/api/v1/search?q=incapacitÃ©%20travail\n *\n * @param {string} querystring.q A `q` querystring param containing the query to process.\n * @param {string} querystring.skipSavedResults A `skipSavedResults` querystring param indicates that we skip the savedResults search\n * @returns {Object} Results.\n */\nrouter.get(\"/search\", async (ctx) => {\n  const { q: query } = ctx.query;\n\n  const sources = [\n    SOURCES.SHEET_MT,\n    SOURCES.SHEET_SP,\n    SOURCES.LETTERS,\n    SOURCES.TOOLS,\n    SOURCES.CONTRIBUTIONS,\n    SOURCES.EXTERNALS,\n    SOURCES.THEMATIC_FILES,\n    SOURCES.EDITORIAL_CONTENT,\n    SOURCES.CCN,\n  ];\n  const skipPrequalifiedResults =\n    ctx.query.skipSavedResults === \"\" || ctx.query.skipSavedResults === \"true\";\n\n  // check prequalified requests\n  const prequalifiedResults =\n    !skipPrequalifiedResults && (await getPrequalifiedResults(query));\n  let documents = [];\n  let articles = [];\n  let themes = [];\n\n  if (prequalifiedResults) {\n    prequalifiedResults.forEach(\n      (item) => (item._source.algo = \"pre-qualified\")\n    );\n    documents = prequalifiedResults.filter(\n      ({ _source: { source } }) =>\n        ![SOURCES.CDT, SOURCES.THEMES].includes(source)\n    );\n    articles = prequalifiedResults.filter(\n      ({ _source: { source } }) => source === SOURCES.CDT\n    );\n    themes = prequalifiedResults.filter(\n      ({ _source: { source } }) => source === SOURCES.THEMES\n    );\n  }\n\n  const searches = {};\n  const shouldRequestCdt = articles.length < 5;\n  const shouldRequestThemes = themes.length < 5;\n  const size = Math.min(ctx.query.size || DEFAULT_RESULTS_NUMBER, MAX_RESULTS);\n\n  const query_vector = await vectorizeQuery(query.toLowerCase()).catch(\n    (error) => {\n      logger.error(error.message);\n    }\n  );\n\n  // if not enough prequalified results, we also trigger ES search\n  if (\n    !prequalifiedResults ||\n    prequalifiedResults.length < DEFAULT_RESULTS_NUMBER\n  ) {\n    searches[DOCUMENTS_ES] = [\n      { index },\n      getSearchBody({ query, size, sources }),\n    ];\n    if (query_vector) {\n      searches[DOCUMENTS_SEM] = [\n        { index },\n        getSemBody({ query_vector, size, sources }),\n      ];\n    }\n  }\n\n  if (shouldRequestThemes) {\n    const themeNumber = THEMES_RESULTS_NUMBER - themes.length;\n    searches[THEMES_ES] = [\n      { index }, // we search in themeIndex here to try to match title in breadcrumb\n      getRelatedThemesBody({\n        query,\n        size: themeNumber,\n      }),\n    ];\n    if (query_vector) {\n      searches[THEMES_SEM] = [\n        { index },\n        getSemBody({\n          query_vector,\n          size: themeNumber,\n          sources: [SOURCES.THEMES],\n        }),\n      ];\n    }\n  }\n\n  if (shouldRequestCdt) {\n    const cdtNumber = CDT_RESULTS_NUMBER - articles.length;\n    searches[CDT_ES] = [\n      { index },\n      getRelatedArticlesBody({\n        query,\n        size: cdtNumber,\n      }),\n    ];\n  }\n\n  const results = await msearch({\n    client: elasticsearchClient,\n    searches,\n  });\n\n  const fulltextHits = extractHits(results[DOCUMENTS_ES]);\n  fulltextHits.forEach((item) => (item._source.algo = \"fulltext\"));\n\n  const semanticHits = extractHits(results[DOCUMENTS_SEM]);\n  semanticHits.forEach((item) => (item._source.algo = \"semantic\"));\n\n  // we only consider semantic results above a given threshold\n  const semanticHitsFiltered = semanticHits.filter(\n    (item) => item._score > SEMANTIC_THRESHOLD\n  );\n\n  // we merge prequalified + full text + semantic results\n  const mergedSearchResults = mergePipe(\n    fulltextHits,\n    semanticHitsFiltered,\n    size\n  );\n  documents.push(...mergedSearchResults);\n  documents = removeDuplicate(documents);\n\n  if (shouldRequestThemes) {\n    const fulltextHits = extractHits(results[THEMES_ES]);\n    const semanticHits = extractHits(results[THEMES_SEM]);\n    fulltextHits.forEach((item) => (item._source.algo = \"fulltext\"));\n    semanticHits.forEach((item) => (item._source.algo = \"semantic\"));\n    themes = removeDuplicate(\n      themes\n        .concat(merge(fulltextHits, semanticHits, THEMES_RESULTS_NUMBER * 2))\n        .slice(0, THEMES_RESULTS_NUMBER)\n    );\n  }\n  if (shouldRequestCdt) {\n    articles = removeDuplicate(articles.concat(results[CDT_ES].hits.hits));\n  }\n\n  logger.info(`search: ${query} took ${results.took}ms`);\n\n  ctx.body = {\n    articles: articles.map(({ _score, _source }) => ({ _score, ..._source })),\n    documents: documents.map(({ _score, _source }) => ({ _score, ..._source })),\n    // we add source prop since some result might come from dedicataed themes index\n    // wich has no source prop\n    themes: themes.map(({ _score, _source }) => ({\n      _score,\n      ..._source,\n      source: SOURCES.THEMES,\n    })),\n  };\n});\n\nexport default router;\n\nfunction extractHits(response) {\n  if (response && response.hits) {\n    return response.hits.hits;\n  }\n  return [];\n}\n\nasync function msearch({ client, searches }) {\n  const requests = [];\n  const keys = [];\n\n  // return an empty object if we receive an empty object\n  if (Object.keys(searches).length === 0) {\n    return {};\n  }\n\n  for (const [key, [index, query]] of Object.entries(searches)) {\n    requests.push(index, query);\n    keys.push(key);\n  }\n\n  const { body, error } = await client.msearch({ body: requests });\n\n  if (error) {\n    throw error;\n  }\n\n  const results = keys.reduce((state, key, index) => {\n    const resp = body.responses[index];\n\n    if (resp.error) {\n      logger.error(\n        `Elastic search error : index ${index}, search key ${key} : ${JSON.stringify(\n          resp.error,\n          null,\n          2\n        )}`\n      );\n    }\n\n    state[key] = resp;\n    return state;\n  }, {});\n\n  results.took = body.took;\n\n  return results;\n}\n"],"names":["elasticsearchClient","API_BASE_URL","CDTN_ADMIN_VERSION","Router","require","SOURCES","DOCUMENTS","vectorizeQuery","getPrequalifiedResults","getSearchBody","getSemBody","getRelatedThemesBody","getRelatedArticlesBody","removeDuplicate","merge","mergePipe","logger","ES_INDEX_PREFIX","process","env","index","MAX_RESULTS","DEFAULT_RESULTS_NUMBER","THEMES_RESULTS_NUMBER","CDT_RESULTS_NUMBER","SEMANTIC_THRESHOLD","router","prefix","DOCUMENTS_SEM","DOCUMENTS_ES","THEMES_ES","THEMES_SEM","CDT_ES","get","ctx","q","query","sources","SHEET_MT","SHEET_SP","LETTERS","TOOLS","CONTRIBUTIONS","EXTERNALS","THEMATIC_FILES","EDITORIAL_CONTENT","CCN","skipPrequalifiedResults","skipSavedResults","prequalifiedResults","documents","articles","themes","forEach","item","_source","algo","filter","source","CDT","THEMES","includes","searches","shouldRequestCdt","length","shouldRequestThemes","size","Math","min","query_vector","toLowerCase","catch","error","message","themeNumber","cdtNumber","results","msearch","client","fulltextHits","extractHits","semanticHits","semanticHitsFiltered","_score","mergedSearchResults","push","concat","slice","hits","info","took","body","map","response","requests","keys","Object","key","entries","reduce","state","resp","responses","JSON","stringify"],"mappings":"AAAA,OAAOA,yBAAyB,2BAA2B;AAC3D,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,eAAe;AAEhE,MAAMC,SAASC,QAAQ;AACvB,MAAM,EAAEC,QAAO,EAAE,GAAGD,QAAQ;AAC5B,MAAM,EAAEE,UAAS,EAAEC,eAAc,EAAE,GAAGH,QAAQ;AAC9C,MAAMI,yBAAyBJ,QAAQ;AACvC,MAAMK,gBAAgBL,QAAQ;AAC9B,MAAMM,aAAaN,QAAQ;AAC3B,MAAMO,uBAAuBP,QAAQ;AACrC,MAAMQ,yBAAyBR,QAAQ;AACvC,MAAM,EAAES,gBAAe,EAAEC,MAAK,EAAEC,UAAS,EAAE,GAAGX,QAAQ;AACtD,MAAM,EAAEY,OAAM,EAAE,GAAGZ,QAAQ;AAE3B,MAAMa,kBAAkBC,QAAQC,GAAG,CAACF,eAAe,IAAI;AACvD,MAAMG,QAAQ,CAAC,EAAEH,gBAAgB,CAAC,EAAEf,mBAAmB,CAAC,EAAEI,UAAU,CAAC;AAErE,MAAMe,cAAc;AACpB,MAAMC,yBAAyB;AAC/B,MAAMC,wBAAwB;AAC9B,MAAMC,qBAAqB;AAC3B,MAAMC,qBAAqB;AAE3B,MAAMC,SAAS,IAAIvB,OAAO;IAAEwB,QAAQ1B;AAAa;AAEjD,MAAM2B,gBAAgB;AACtB,MAAMC,eAAe;AACrB,MAAMC,YAAY;AAClB,MAAMC,aAAa;AACnB,MAAMC,SAAS;AAEf;;;;;;;;;CASC,GACDN,OAAOO,GAAG,CAAC,WAAW,OAAOC,MAAQ;IACnC,MAAM,EAAEC,GAAGC,MAAK,EAAE,GAAGF,IAAIE,KAAK;IAE9B,MAAMC,UAAU;QACdhC,QAAQiC,QAAQ;QAChBjC,QAAQkC,QAAQ;QAChBlC,QAAQmC,OAAO;QACfnC,QAAQoC,KAAK;QACbpC,QAAQqC,aAAa;QACrBrC,QAAQsC,SAAS;QACjBtC,QAAQuC,cAAc;QACtBvC,QAAQwC,iBAAiB;QACzBxC,QAAQyC,GAAG;KACZ;IACD,MAAMC,0BACJb,IAAIE,KAAK,CAACY,gBAAgB,KAAK,MAAMd,IAAIE,KAAK,CAACY,gBAAgB,KAAK;IAEtE,8BAA8B;IAC9B,MAAMC,sBACJ,CAACF,2BAA4B,MAAMvC,uBAAuB4B;IAC5D,IAAIc,YAAY,EAAE;IAClB,IAAIC,WAAW,EAAE;IACjB,IAAIC,SAAS,EAAE;IAEf,IAAIH,qBAAqB;QACvBA,oBAAoBI,OAAO,CACzB,CAACC,OAAUA,KAAKC,OAAO,CAACC,IAAI,GAAG;QAEjCN,YAAYD,oBAAoBQ,MAAM,CACpC,CAAC,EAAEF,SAAS,EAAEG,OAAM,EAAE,CAAA,EAAE,GACtB,CAAC;gBAACrD,QAAQsD,GAAG;gBAAEtD,QAAQuD,MAAM;aAAC,CAACC,QAAQ,CAACH;QAE5CP,WAAWF,oBAAoBQ,MAAM,CACnC,CAAC,EAAEF,SAAS,EAAEG,OAAM,EAAE,CAAA,EAAE,GAAKA,WAAWrD,QAAQsD,GAAG;QAErDP,SAASH,oBAAoBQ,MAAM,CACjC,CAAC,EAAEF,SAAS,EAAEG,OAAM,EAAE,CAAA,EAAE,GAAKA,WAAWrD,QAAQuD,MAAM;IAE1D,CAAC;IAED,MAAME,WAAW,CAAC;IAClB,MAAMC,mBAAmBZ,SAASa,MAAM,GAAG;IAC3C,MAAMC,sBAAsBb,OAAOY,MAAM,GAAG;IAC5C,MAAME,OAAOC,KAAKC,GAAG,CAAClC,IAAIE,KAAK,CAAC8B,IAAI,IAAI5C,wBAAwBD;IAEhE,MAAMgD,eAAe,MAAM9D,eAAe6B,MAAMkC,WAAW,IAAIC,KAAK,CAClE,CAACC,QAAU;QACTxD,OAAOwD,KAAK,CAACA,MAAMC,OAAO;IAC5B;IAGF,gEAAgE;IAChE,IACE,CAACxB,uBACDA,oBAAoBe,MAAM,GAAG1C,wBAC7B;QACAwC,QAAQ,CAACjC,aAAa,GAAG;YACvB;gBAAET;YAAM;YACRX,cAAc;gBAAE2B;gBAAO8B;gBAAM7B;YAAQ;SACtC;QACD,IAAIgC,cAAc;YAChBP,QAAQ,CAAClC,cAAc,GAAG;gBACxB;oBAAER;gBAAM;gBACRV,WAAW;oBAAE2D;oBAAcH;oBAAM7B;gBAAQ;aAC1C;QACH,CAAC;IACH,CAAC;IAED,IAAI4B,qBAAqB;QACvB,MAAMS,cAAcnD,wBAAwB6B,OAAOY,MAAM;QACzDF,QAAQ,CAAChC,UAAU,GAAG;YACpB;gBAAEV;YAAM;YACRT,qBAAqB;gBACnByB;gBACA8B,MAAMQ;YACR;SACD;QACD,IAAIL,cAAc;YAChBP,QAAQ,CAAC/B,WAAW,GAAG;gBACrB;oBAAEX;gBAAM;gBACRV,WAAW;oBACT2D;oBACAH,MAAMQ;oBACNrC,SAAS;wBAAChC,QAAQuD,MAAM;qBAAC;gBAC3B;aACD;QACH,CAAC;IACH,CAAC;IAED,IAAIG,kBAAkB;QACpB,MAAMY,YAAYnD,qBAAqB2B,SAASa,MAAM;QACtDF,QAAQ,CAAC9B,OAAO,GAAG;YACjB;gBAAEZ;YAAM;YACRR,uBAAuB;gBACrBwB;gBACA8B,MAAMS;YACR;SACD;IACH,CAAC;IAED,MAAMC,UAAU,MAAMC,QAAQ;QAC5BC,QAAQ9E;QACR8D;IACF;IAEA,MAAMiB,eAAeC,YAAYJ,OAAO,CAAC/C,aAAa;IACtDkD,aAAa1B,OAAO,CAAC,CAACC,OAAUA,KAAKC,OAAO,CAACC,IAAI,GAAG;IAEpD,MAAMyB,eAAeD,YAAYJ,OAAO,CAAChD,cAAc;IACvDqD,aAAa5B,OAAO,CAAC,CAACC,OAAUA,KAAKC,OAAO,CAACC,IAAI,GAAG;IAEpD,4DAA4D;IAC5D,MAAM0B,uBAAuBD,aAAaxB,MAAM,CAC9C,CAACH,OAASA,KAAK6B,MAAM,GAAG1D;IAG1B,uDAAuD;IACvD,MAAM2D,sBAAsBrE,UAC1BgE,cACAG,sBACAhB;IAEFhB,UAAUmC,IAAI,IAAID;IAClBlC,YAAYrC,gBAAgBqC;IAE5B,IAAIe,qBAAqB;QACvB,MAAMc,gBAAeC,YAAYJ,OAAO,CAAC9C,UAAU;QACnD,MAAMmD,gBAAeD,YAAYJ,OAAO,CAAC7C,WAAW;QACpDgD,cAAa1B,OAAO,CAAC,CAACC,OAAUA,KAAKC,OAAO,CAACC,IAAI,GAAG;QACpDyB,cAAa5B,OAAO,CAAC,CAACC,OAAUA,KAAKC,OAAO,CAACC,IAAI,GAAG;QACpDJ,SAASvC,gBACPuC,OACGkC,MAAM,CAACxE,MAAMiE,eAAcE,eAAc1D,wBAAwB,IACjEgE,KAAK,CAAC,GAAGhE;IAEhB,CAAC;IACD,IAAIwC,kBAAkB;QACpBZ,WAAWtC,gBAAgBsC,SAASmC,MAAM,CAACV,OAAO,CAAC5C,OAAO,CAACwD,IAAI,CAACA,IAAI;IACtE,CAAC;IAEDxE,OAAOyE,IAAI,CAAC,CAAC,QAAQ,EAAErD,MAAM,MAAM,EAAEwC,QAAQc,IAAI,CAAC,EAAE,CAAC;IAErDxD,IAAIyD,IAAI,GAAG;QACTxC,UAAUA,SAASyC,GAAG,CAAC,CAAC,EAAET,OAAM,EAAE5B,QAAO,EAAE,GAAM,CAAA;gBAAE4B;gBAAQ,GAAG5B,OAAO;YAAC,CAAA;QACtEL,WAAWA,UAAU0C,GAAG,CAAC,CAAC,EAAET,OAAM,EAAE5B,QAAO,EAAE,GAAM,CAAA;gBAAE4B;gBAAQ,GAAG5B,OAAO;YAAC,CAAA;QACxE,+EAA+E;QAC/E,0BAA0B;QAC1BH,QAAQA,OAAOwC,GAAG,CAAC,CAAC,EAAET,OAAM,EAAE5B,QAAO,EAAE,GAAM,CAAA;gBAC3C4B;gBACA,GAAG5B,OAAO;gBACVG,QAAQrD,QAAQuD,MAAM;YACxB,CAAA;IACF;AACF;AAEA,eAAelC,OAAO;AAEtB,SAASsD,YAAYa,QAAQ,EAAE;IAC7B,IAAIA,YAAYA,SAASL,IAAI,EAAE;QAC7B,OAAOK,SAASL,IAAI,CAACA,IAAI;IAC3B,CAAC;IACD,OAAO,EAAE;AACX;AAEA,eAAeX,QAAQ,EAAEC,OAAM,EAAEhB,SAAQ,EAAE,EAAE;IAC3C,MAAMgC,WAAW,EAAE;IACnB,MAAMC,OAAO,EAAE;IAEf,uDAAuD;IACvD,IAAIC,OAAOD,IAAI,CAACjC,UAAUE,MAAM,KAAK,GAAG;QACtC,OAAO,CAAC;IACV,CAAC;IAED,KAAK,MAAM,CAACiC,KAAK,CAAC7E,OAAOgB,MAAM,CAAC,IAAI4D,OAAOE,OAAO,CAACpC,UAAW;QAC5DgC,SAAST,IAAI,CAACjE,OAAOgB;QACrB2D,KAAKV,IAAI,CAACY;IACZ;IAEA,MAAM,EAAEN,KAAI,EAAEnB,MAAK,EAAE,GAAG,MAAMM,OAAOD,OAAO,CAAC;QAAEc,MAAMG;IAAS;IAE9D,IAAItB,OAAO;QACT,MAAMA,MAAM;IACd,CAAC;IAED,MAAMI,UAAUmB,KAAKI,MAAM,CAAC,CAACC,OAAOH,KAAK7E,QAAU;QACjD,MAAMiF,OAAOV,KAAKW,SAAS,CAAClF,MAAM;QAElC,IAAIiF,KAAK7B,KAAK,EAAE;YACdxD,OAAOwD,KAAK,CACV,CAAC,6BAA6B,EAAEpD,MAAM,aAAa,EAAE6E,IAAI,GAAG,EAAEM,KAAKC,SAAS,CAC1EH,KAAK7B,KAAK,EACV,IAAI,EACJ,GACA,CAAC;QAEP,CAAC;QAED4B,KAAK,CAACH,IAAI,GAAGI;QACb,OAAOD;IACT,GAAG,CAAC;IAEJxB,QAAQc,IAAI,GAAGC,KAAKD,IAAI;IAExB,OAAOd;AACT"}