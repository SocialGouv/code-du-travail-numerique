{"version":3,"sources":["../../../src/routes/search/searchPrequalifiedResults.js"],"sourcesContent":["import elasticsearchClient from \"../../conf/elasticsearch\";\n\nconst { SOURCES } = require(\"@socialgouv/cdtn-sources\");\nconst { logger } = require(\"@socialgouv/cdtn-logger\");\nconst fuzz = require(\"fuzzball\");\nconst deburr = require(\"lodash.deburr\");\nconst memoizee = require(\"memoizee\");\nconst { DOCUMENTS } = require(\"@socialgouv/cdtn-elasticsearch\");\nconst { CDTN_ADMIN_VERSION } = require(\"../v1.prefix.js\");\n\nconst ES_INDEX_PREFIX = process.env.ES_INDEX_PREFIX || \"cdtn\";\nconst index = `${ES_INDEX_PREFIX}-${CDTN_ADMIN_VERSION}_${DOCUMENTS}`;\nconst THRESHOLD = 90;\nconst NON_FUZZY_TOKENS = new Set([\"cdd\", \"cdi\", \"csp\"]);\n\n// Preprocess query : remove accentuation and\n//  non alpha numerical to speed up the lookup.\nconst preprocess = (q) => {\n  return fuzz.full_process(deburr(q.trim()));\n};\n\n// We populate the saved queries in an object in order to ease\n//  searches and map variant matches with the actual known query.\n\nconst prequalifiedQuery = {\n  bool: {\n    filter: [\n      { term: { source: SOURCES.PREQUALIFIED } },\n      { term: { isPublished: true } },\n    ],\n  },\n};\n\nasync function _getPrequalified() {\n  const { body: { count = 10000 } = {} } = await elasticsearchClient.count({\n    body: {\n      query: prequalifiedQuery,\n    },\n    index,\n  });\n  logger.info(`Loading ${count} prequalifiedQueries`);\n\n  const response = await elasticsearchClient.search({\n    body: {\n      query: prequalifiedQuery,\n      size: count,\n    },\n    index,\n  });\n\n  if (response.body.hits.total.value === 0) {\n    return null;\n  }\n\n  const knownQueriesSet = response.body.hits.hits.reduce(\n    (queries, { _source: query }) => {\n      for (const variant of query.variants) {\n        const prepro = preprocess(variant);\n        queries[prepro] = query;\n      }\n      const title = preprocess(query.title);\n      queries[title] = query;\n      return queries;\n    },\n    {}\n  );\n\n  return {\n    allVariants: Object.keys(knownQueriesSet),\n    knownQueriesSet,\n  };\n}\n\nconst getPrequalified = memoizee(_getPrequalified, {\n  maxAge: 1000 * 5 * 60,\n  preFetch: true,\n  promise: true,\n});\n\nconst fuzzOptions = {\n  full_process: false,\n  limit: 2,\n  scorer: fuzz.ratio,\n  unsorted: false,\n};\n\nconst testFuzzyAllowed = (query, match) => {\n  // don't apply fuzzy matching to specific terms\n  const matchingNonFuzz = match\n    .split(/\\s+/)\n    .filter((token) => NON_FUZZY_TOKENS.has(token));\n\n  // if the matching variant contains non-fuzzy tokens,\n  // ensure the query also contains it\n  const queryTokens = query.split(/\\s+/);\n  if (matchingNonFuzz.length > 0) {\n    return (\n      matchingNonFuzz.filter((token) => queryTokens.includes(token)).length > 0\n    );\n  } else {\n    return true;\n  }\n};\n\n// Test if a given query fuzzy matches with\n//  a known one (and variants).\nconst testMatch = ({ query, knownQueriesSet, allVariants }) => {\n  // preprocess query\n  const ppQuery = preprocess(query);\n\n  const results = fuzz.extract(ppQuery, allVariants, fuzzOptions);\n\n  if (results && results.length > 1) {\n    const closerMatch = results[0][0];\n    const bestScore = results[0][1];\n\n    // ensure match is valid\n    if (testFuzzyAllowed(query, closerMatch) && bestScore > THRESHOLD) {\n      return knownQueriesSet[closerMatch];\n    }\n  }\n};\n\n// find known query if any\nconst getPrequalifiedResults = async (query) => {\n  const { knownQueriesSet, allVariants } = await getPrequalified();\n\n  // allow\n  const knownQuery =\n    query.length >= 3 && testMatch({ allVariants, knownQueriesSet, query });\n\n  if (knownQuery && knownQuery.refs && knownQuery.refs.length > 0) {\n    // get ES results for a known query\n    logger.info(`getSavedResult: ${knownQuery.title}`);\n    return knownQuery.refs.map((ref) => ({\n      _source: ref,\n    }));\n  }\n  return false;\n};\n\nmodule.exports = getPrequalifiedResults;\n"],"names":["elasticsearchClient","SOURCES","require","logger","fuzz","deburr","memoizee","DOCUMENTS","CDTN_ADMIN_VERSION","ES_INDEX_PREFIX","process","env","index","THRESHOLD","NON_FUZZY_TOKENS","Set","preprocess","q","full_process","trim","prequalifiedQuery","bool","filter","term","source","PREQUALIFIED","isPublished","_getPrequalified","body","count","query","info","response","search","size","hits","total","value","knownQueriesSet","reduce","queries","_source","variant","variants","prepro","title","allVariants","Object","keys","getPrequalified","maxAge","preFetch","promise","fuzzOptions","limit","scorer","ratio","unsorted","testFuzzyAllowed","match","matchingNonFuzz","split","token","has","queryTokens","length","includes","testMatch","ppQuery","results","extract","closerMatch","bestScore","getPrequalifiedResults","knownQuery","refs","map","ref","module","exports"],"mappings":"AAAA,OAAOA,yBAAyB,2BAA2B;AAE3D,MAAM,EAAEC,QAAO,EAAE,GAAGC,QAAQ;AAC5B,MAAM,EAAEC,OAAM,EAAE,GAAGD,QAAQ;AAC3B,MAAME,OAAOF,QAAQ;AACrB,MAAMG,SAASH,QAAQ;AACvB,MAAMI,WAAWJ,QAAQ;AACzB,MAAM,EAAEK,UAAS,EAAE,GAAGL,QAAQ;AAC9B,MAAM,EAAEM,mBAAkB,EAAE,GAAGN,QAAQ;AAEvC,MAAMO,kBAAkBC,QAAQC,GAAG,CAACF,eAAe,IAAI;AACvD,MAAMG,QAAQ,CAAC,EAAEH,gBAAgB,CAAC,EAAED,mBAAmB,CAAC,EAAED,UAAU,CAAC;AACrE,MAAMM,YAAY;AAClB,MAAMC,mBAAmB,IAAIC,IAAI;IAAC;IAAO;IAAO;CAAM;AAEtD,6CAA6C;AAC7C,+CAA+C;AAC/C,MAAMC,aAAa,CAACC,IAAM;IACxB,OAAOb,KAAKc,YAAY,CAACb,OAAOY,EAAEE,IAAI;AACxC;AAEA,8DAA8D;AAC9D,iEAAiE;AAEjE,MAAMC,oBAAoB;IACxBC,MAAM;QACJC,QAAQ;YACN;gBAAEC,MAAM;oBAAEC,QAAQvB,QAAQwB,YAAY;gBAAC;YAAE;YACzC;gBAAEF,MAAM;oBAAEG,aAAa,IAAI;gBAAC;YAAE;SAC/B;IACH;AACF;AAEA,eAAeC,mBAAmB;IAChC,MAAM,EAAEC,MAAM,EAAEC,OAAQ,MAAK,EAAE,GAAG,CAAC,CAAC,CAAA,EAAE,GAAG,MAAM7B,oBAAoB6B,KAAK,CAAC;QACvED,MAAM;YACJE,OAAOV;QACT;QACAR;IACF;IACAT,OAAO4B,IAAI,CAAC,CAAC,QAAQ,EAAEF,MAAM,oBAAoB,CAAC;IAElD,MAAMG,WAAW,MAAMhC,oBAAoBiC,MAAM,CAAC;QAChDL,MAAM;YACJE,OAAOV;YACPc,MAAML;QACR;QACAjB;IACF;IAEA,IAAIoB,SAASJ,IAAI,CAACO,IAAI,CAACC,KAAK,CAACC,KAAK,KAAK,GAAG;QACxC,OAAO,IAAI;IACb,CAAC;IAED,MAAMC,kBAAkBN,SAASJ,IAAI,CAACO,IAAI,CAACA,IAAI,CAACI,MAAM,CACpD,CAACC,SAAS,EAAEC,SAASX,MAAK,EAAE,GAAK;QAC/B,KAAK,MAAMY,WAAWZ,MAAMa,QAAQ,CAAE;YACpC,MAAMC,SAAS5B,WAAW0B;YAC1BF,OAAO,CAACI,OAAO,GAAGd;QACpB;QACA,MAAMe,QAAQ7B,WAAWc,MAAMe,KAAK;QACpCL,OAAO,CAACK,MAAM,GAAGf;QACjB,OAAOU;IACT,GACA,CAAC;IAGH,OAAO;QACLM,aAAaC,OAAOC,IAAI,CAACV;QACzBA;IACF;AACF;AAEA,MAAMW,kBAAkB3C,SAASqB,kBAAkB;IACjDuB,QAAQ,OAAO,IAAI;IACnBC,UAAU,IAAI;IACdC,SAAS,IAAI;AACf;AAEA,MAAMC,cAAc;IAClBnC,cAAc,KAAK;IACnBoC,OAAO;IACPC,QAAQnD,KAAKoD,KAAK;IAClBC,UAAU,KAAK;AACjB;AAEA,MAAMC,mBAAmB,CAAC5B,OAAO6B,QAAU;IACzC,+CAA+C;IAC/C,MAAMC,kBAAkBD,MACrBE,KAAK,CAAC,OACNvC,MAAM,CAAC,CAACwC,QAAUhD,iBAAiBiD,GAAG,CAACD;IAE1C,qDAAqD;IACrD,oCAAoC;IACpC,MAAME,cAAclC,MAAM+B,KAAK,CAAC;IAChC,IAAID,gBAAgBK,MAAM,GAAG,GAAG;QAC9B,OACEL,gBAAgBtC,MAAM,CAAC,CAACwC,QAAUE,YAAYE,QAAQ,CAACJ,QAAQG,MAAM,GAAG;IAE5E,OAAO;QACL,OAAO,IAAI;IACb,CAAC;AACH;AAEA,2CAA2C;AAC3C,+BAA+B;AAC/B,MAAME,YAAY,CAAC,EAAErC,MAAK,EAAEQ,gBAAe,EAAEQ,YAAW,EAAE,GAAK;IAC7D,mBAAmB;IACnB,MAAMsB,UAAUpD,WAAWc;IAE3B,MAAMuC,UAAUjE,KAAKkE,OAAO,CAACF,SAAStB,aAAaO;IAEnD,IAAIgB,WAAWA,QAAQJ,MAAM,GAAG,GAAG;QACjC,MAAMM,cAAcF,OAAO,CAAC,EAAE,CAAC,EAAE;QACjC,MAAMG,YAAYH,OAAO,CAAC,EAAE,CAAC,EAAE;QAE/B,wBAAwB;QACxB,IAAIX,iBAAiB5B,OAAOyC,gBAAgBC,YAAY3D,WAAW;YACjE,OAAOyB,eAAe,CAACiC,YAAY;QACrC,CAAC;IACH,CAAC;AACH;AAEA,0BAA0B;AAC1B,MAAME,yBAAyB,OAAO3C,QAAU;IAC9C,MAAM,EAAEQ,gBAAe,EAAEQ,YAAW,EAAE,GAAG,MAAMG;IAE/C,QAAQ;IACR,MAAMyB,aACJ5C,MAAMmC,MAAM,IAAI,KAAKE,UAAU;QAAErB;QAAaR;QAAiBR;IAAM;IAEvE,IAAI4C,cAAcA,WAAWC,IAAI,IAAID,WAAWC,IAAI,CAACV,MAAM,GAAG,GAAG;QAC/D,mCAAmC;QACnC9D,OAAO4B,IAAI,CAAC,CAAC,gBAAgB,EAAE2C,WAAW7B,KAAK,CAAC,CAAC;QACjD,OAAO6B,WAAWC,IAAI,CAACC,GAAG,CAAC,CAACC,MAAS,CAAA;gBACnCpC,SAASoC;YACX,CAAA;IACF,CAAC;IACD,OAAO,KAAK;AACd;AAEAC,OAAOC,OAAO,GAAGN"}