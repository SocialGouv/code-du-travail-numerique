{"version":3,"sources":["../../../src/routes/__tests__/utils.test.js"],"sourcesContent":["const utils = require(\"../search/utils\");\n\nconst arr1 = [\n  {\n    _source: {\n      algo: \"ft\",\n      slug: \"a\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n  {\n    _source: {\n      algo: \"ft\",\n      slug: \"hey\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n];\nconst arr2 = [\n  {\n    _source: {\n      algo: \"sem\",\n      slug: \"hey\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n  {\n    _source: {\n      algo: \"sem\",\n      slug: \"c\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n];\n\nconst tests = [\n  {\n    expected: [\n      { score: 2, title: 1 },\n      { score: 4, title: 2 },\n    ],\n    input: [\n      [\n        {\n          score: 2,\n          title: 1,\n        },\n      ],\n      [\n        {\n          score: 4,\n          title: 2,\n        },\n      ],\n    ],\n  },\n  {\n    expected: [{ score: 2, title: 1 }],\n    input: [\n      [\n        {\n          score: 2,\n          title: 1,\n        },\n      ],\n      [],\n    ],\n  },\n];\n\nconst test_dupl = [\n  {\n    expected: [\n      {\n        _source: {\n          algo: \"ft\",\n          slug: \"a\",\n          source: \"a\",\n          whatever: \"whatever\",\n        },\n      },\n      {\n        _source: {\n          algo: \"ft\",\n          slug: \"hey\",\n          source: \"a\",\n          whatever: \"whatever\",\n        },\n      },\n      {\n        _source: {\n          algo: \"sem\",\n          slug: \"c\",\n          source: \"a\",\n          whatever: \"whatever\",\n        },\n      },\n    ],\n    input: arr1.concat(arr2),\n  },\n];\nconst test_mergePipe_result = [\n  {\n    _source: {\n      algo: \"ft\",\n      slug: \"a\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n  {\n    _source: {\n      algo: \"both\",\n      slug: \"hey\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n  {\n    _source: {\n      algo: \"sem\",\n      slug: \"c\",\n      source: \"a\",\n      whatever: \"whatever\",\n    },\n  },\n];\ntest(\"merge two\", () => {\n  tests.forEach((t) => {\n    expect(utils.merge(t.input[0], t.input[1], 10)).toEqual(t.expected);\n  });\n});\n\ntest(\"remove duplicates\", () => {\n  test_dupl.forEach((t) => {\n    expect(utils.removeDuplicate(t.input)).toEqual(t.expected);\n  });\n});\n\ntest(\"mergePipe\", () => {\n  test_dupl.forEach(() => {\n    expect(utils.mergePipe(arr1, arr2, 4)).toEqual(test_mergePipe_result);\n  });\n});\n"],"names":["utils","require","arr1","_source","algo","slug","source","whatever","arr2","tests","expected","score","title","input","test_dupl","concat","test_mergePipe_result","test","forEach","t","expect","merge","toEqual","removeDuplicate","mergePipe"],"mappings":"AAAA,MAAMA,QAAQC,QAAQ;AAEtB,MAAMC,OAAO;IACX;QACEC,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;IACA;QACEJ,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;CACD;AACD,MAAMC,OAAO;IACX;QACEL,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;IACA;QACEJ,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;CACD;AAED,MAAME,QAAQ;IACZ;QACEC,UAAU;YACR;gBAAEC,OAAO;gBAAGC,OAAO;YAAE;YACrB;gBAAED,OAAO;gBAAGC,OAAO;YAAE;SACtB;QACDC,OAAO;YACL;gBACE;oBACEF,OAAO;oBACPC,OAAO;gBACT;aACD;YACD;gBACE;oBACED,OAAO;oBACPC,OAAO;gBACT;aACD;SACF;IACH;IACA;QACEF,UAAU;YAAC;gBAAEC,OAAO;gBAAGC,OAAO;YAAE;SAAE;QAClCC,OAAO;YACL;gBACE;oBACEF,OAAO;oBACPC,OAAO;gBACT;aACD;YACD,EAAE;SACH;IACH;CACD;AAED,MAAME,YAAY;IAChB;QACEJ,UAAU;YACR;gBACEP,SAAS;oBACPC,MAAM;oBACNC,MAAM;oBACNC,QAAQ;oBACRC,UAAU;gBACZ;YACF;YACA;gBACEJ,SAAS;oBACPC,MAAM;oBACNC,MAAM;oBACNC,QAAQ;oBACRC,UAAU;gBACZ;YACF;YACA;gBACEJ,SAAS;oBACPC,MAAM;oBACNC,MAAM;oBACNC,QAAQ;oBACRC,UAAU;gBACZ;YACF;SACD;QACDM,OAAOX,KAAKa,MAAM,CAACP;IACrB;CACD;AACD,MAAMQ,wBAAwB;IAC5B;QACEb,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;IACA;QACEJ,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;IACA;QACEJ,SAAS;YACPC,MAAM;YACNC,MAAM;YACNC,QAAQ;YACRC,UAAU;QACZ;IACF;CACD;AACDU,KAAK,aAAa,IAAM;IACtBR,MAAMS,OAAO,CAAC,CAACC,IAAM;QACnBC,OAAOpB,MAAMqB,KAAK,CAACF,EAAEN,KAAK,CAAC,EAAE,EAAEM,EAAEN,KAAK,CAAC,EAAE,EAAE,KAAKS,OAAO,CAACH,EAAET,QAAQ;IACpE;AACF;AAEAO,KAAK,qBAAqB,IAAM;IAC9BH,UAAUI,OAAO,CAAC,CAACC,IAAM;QACvBC,OAAOpB,MAAMuB,eAAe,CAACJ,EAAEN,KAAK,GAAGS,OAAO,CAACH,EAAET,QAAQ;IAC3D;AACF;AAEAO,KAAK,aAAa,IAAM;IACtBH,UAAUI,OAAO,CAAC,IAAM;QACtBE,OAAOpB,MAAMwB,SAAS,CAACtB,MAAMM,MAAM,IAAIc,OAAO,CAACN;IACjD;AACF"}