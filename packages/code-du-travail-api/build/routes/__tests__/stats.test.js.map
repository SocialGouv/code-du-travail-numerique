{"version":3,"sources":["../../../src/routes/__tests__/stats.test.ts"],"sourcesContent":["import fetch from \"node-fetch\";\n\nimport router from \"../stats\";\n\nconst request = require(\"supertest\");\nconst Koa = require(\"koa\");\n\nconst app = new Koa();\napp.use(router.routes());\n\njest.mock(\"node-fetch\");\n\ndescribe(\"Stats\", () => {\n  const mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n\n  it(\"should return data\", async () => {\n    mockFetch.mockImplementation(async (url: any): Promise<any> => {\n      if (url.includes(\"VisitsSummary.getVisits\")) {\n        return Promise.resolve({\n          json: () => ({ value: 20 }),\n          ok: true,\n          status: 200,\n        });\n      }\n      if (url.includes(\"Actions.get\")) {\n        return Promise.resolve({\n          json: () => ({ nb_pageviews: 10, nb_searches: 4 }),\n          ok: true,\n          status: 200,\n        });\n      }\n      if (url.includes(\"Events.getAction\")) {\n        return Promise.resolve({\n          json: () => [\n            { label: \"positive\", nb_events: 3 },\n            { label: \"negative\", nb_events: 2 },\n          ],\n          ok: true,\n          status: 200,\n        });\n      }\n      return Promise.reject(\"unkown url\");\n    });\n    const response = await request(app.callback()).get(`/api/v1/stats`);\n    expect(response.status).toBe(200);\n    expect(response.body).toMatchInlineSnapshot(`\n      Object {\n        \"nbDocuments\": 25,\n        \"nbPageViews\": 10,\n        \"nbSearches\": 4,\n        \"nbVisits\": 20,\n      }\n    `);\n    expect(response.ok).toBe(true);\n  });\n\n  it(\"should render an error\", async () => {\n    mockFetch.mockImplementation(async () => {\n      return Promise.reject(\"MATOMO IS DOWN\");\n    });\n    const response = await request(app.callback()).get(`/api/v1/stats`);\n    expect(response.status).toBe(502);\n    expect(response.body).toStrictEqual({});\n    expect(response.ok).toBe(false);\n  });\n});\n"],"names":["fetch","router","request","require","Koa","app","use","routes","jest","mock","describe","mockFetch","it","mockImplementation","url","includes","Promise","resolve","json","value","ok","status","nb_pageviews","nb_searches","label","nb_events","reject","response","callback","get","expect","toBe","body","toMatchInlineSnapshot","toStrictEqual"],"mappings":"AAAA,OAAOA,WAAW,aAAa;AAE/B,OAAOC,YAAY,WAAW;AAE9B,MAAMC,UAAUC,QAAQ;AACxB,MAAMC,MAAMD,QAAQ;AAEpB,MAAME,MAAM,IAAID;AAChBC,IAAIC,GAAG,CAACL,OAAOM,MAAM;AAErBC,KAAKC,IAAI,CAAC;AAEVC,SAAS,SAAS,IAAM;IACtB,MAAMC,YAAYX;IAElBY,GAAG,sBAAsB,UAAY;QACnCD,UAAUE,kBAAkB,CAAC,OAAOC,MAA2B;YAC7D,IAAIA,IAAIC,QAAQ,CAAC,4BAA4B;gBAC3C,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,MAAM,IAAO,CAAA;4BAAEC,OAAO;wBAAG,CAAA;oBACzBC,IAAI,IAAI;oBACRC,QAAQ;gBACV;YACF,CAAC;YACD,IAAIP,IAAIC,QAAQ,CAAC,gBAAgB;gBAC/B,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,MAAM,IAAO,CAAA;4BAAEI,cAAc;4BAAIC,aAAa;wBAAE,CAAA;oBAChDH,IAAI,IAAI;oBACRC,QAAQ;gBACV;YACF,CAAC;YACD,IAAIP,IAAIC,QAAQ,CAAC,qBAAqB;gBACpC,OAAOC,QAAQC,OAAO,CAAC;oBACrBC,MAAM,IAAM;4BACV;gCAAEM,OAAO;gCAAYC,WAAW;4BAAE;4BAClC;gCAAED,OAAO;gCAAYC,WAAW;4BAAE;yBACnC;oBACDL,IAAI,IAAI;oBACRC,QAAQ;gBACV;YACF,CAAC;YACD,OAAOL,QAAQU,MAAM,CAAC;QACxB;QACA,MAAMC,WAAW,MAAMzB,QAAQG,IAAIuB,QAAQ,IAAIC,GAAG,CAAC,CAAC,aAAa,CAAC;QAClEC,OAAOH,SAASN,MAAM,EAAEU,IAAI,CAAC;QAC7BD,OAAOH,SAASK,IAAI,EAAEC,qBAAqB,CAAC,CAAC;;;;;;;IAO7C,CAAC;QACDH,OAAOH,SAASP,EAAE,EAAEW,IAAI,CAAC,IAAI;IAC/B;IAEAnB,GAAG,0BAA0B,UAAY;QACvCD,UAAUE,kBAAkB,CAAC,UAAY;YACvC,OAAOG,QAAQU,MAAM,CAAC;QACxB;QACA,MAAMC,WAAW,MAAMzB,QAAQG,IAAIuB,QAAQ,IAAIC,GAAG,CAAC,CAAC,aAAa,CAAC;QAClEC,OAAOH,SAASN,MAAM,EAAEU,IAAI,CAAC;QAC7BD,OAAOH,SAASK,IAAI,EAAEE,aAAa,CAAC,CAAC;QACrCJ,OAAOH,SAASP,EAAE,EAAEW,IAAI,CAAC,KAAK;IAChC;AACF"}