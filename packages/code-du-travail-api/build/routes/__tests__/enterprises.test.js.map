{"version":3,"sources":["../../../src/routes/__tests__/enterprises.test.js"],"sourcesContent":["import Koa from \"koa\";\nimport fetch from \"node-fetch\";\nimport request from \"supertest\";\n\nimport Data from \"../../tests/cdtn_document.data.json\";\nimport routes from \"../enterprises\";\n\nconst app = new Koa();\napp.use(routes.routes());\njest.mock(\"node-fetch\");\n\ndescribe(\"Test enterprise endpoint\", () => {\n  beforeEach(() => {\n    fetch.mockReset();\n  });\n\n  test(\"Call returns 404 if no enterprises found\", async () => {\n    const apiEnterpriseResponse = {\n      body: \"Not found\",\n      status: 404,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=NOT-FOUND\"\n    );\n\n    expect(response.status).toEqual(404);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=NOT-FOUND&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.text).toEqual(\"Not found\");\n  });\n\n  test(\"Call encode query params\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({}),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      `/api/v1/enterprises?q=${encodeURIComponent(\"La pêche à la ligne\")}`\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      \"https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=La%20p%C3%AAche%20%C3%A0%20la%20ligne&convention=true&employer=true&open=true&matchingLimit=0\"\n    );\n  });\n\n  test(\"A call to retrieve agreements from an enterprise\", async () => {\n    const enterpriseApiDataResponse = {\n      entreprises: [\n        {\n          activitePrincipale:\n            \"Entretien et réparation de véhicules automobiles\",\n          conventions: [\n            {\n              idcc: 1090,\n            },\n          ],\n          etablissements: 1,\n          highlightLabel: \"<b><u>AUTOEXPRESS</b></u>\",\n          label: \"AUTOEXPRESS\",\n          matching: 1,\n          matchingEtablissement: {\n            address: \"1 Rue Clément Ader 08110 Carignan\",\n            siret: \"75280280100023\",\n          },\n          simpleLabel: \"AUTOEXPRESS\",\n          siren: \"752802801\",\n        },\n      ],\n    };\n    const apiEnterpriseResponse = {\n      json: () => enterpriseApiDataResponse,\n      status: 200,\n    };\n\n    const expectedResponse = {\n      entreprises: enterpriseApiDataResponse.entreprises.map((enterprise) => ({\n        ...enterprise,\n        // Conventions data should be extract from elastic\n        conventions: Data.filter(\n          (doc) => doc.num === enterprise.conventions[0].idcc\n        ).map(({ id, num, shortTitle, slug, title, url }) => ({\n          id,\n          num,\n          shortTitle,\n          slug,\n          title,\n          url,\n        })),\n      })),\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body).toEqual(expectedResponse);\n  });\n\n  test(\"Call should pass address if provided\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({}),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=hello&a=my%20address\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      \"https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=hello&address=my%20address&convention=true&employer=true&open=true&matchingLimit=0\"\n    );\n  });\n\n  test(\"Call retrieving agreement with a slug from an enterprise\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({\n        entreprises: [\n          {\n            conventions: [\n              {\n                idcc: 1090,\n              },\n            ],\n          },\n        ],\n      }),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body.entreprises).toHaveLength(1);\n    expect(response.body.entreprises[0].conventions).toHaveLength(1);\n    expect(response.body.entreprises[0].conventions[0].slug).toEqual(\n      \"1090-services-de-lautomobile-commerce-et-reparation-de-lautomobile-du-cycle\"\n    );\n  });\n\n  test(\"Call retrieving agreements with slug and no slug from an enterprise\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({\n        entreprises: [\n          {\n            conventions: [\n              {\n                idcc: 1090,\n              },\n              {\n                idcc: 99999,\n              },\n            ],\n          },\n        ],\n      }),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body.entreprises).toHaveLength(1);\n    expect(response.body.entreprises[0].conventions).toHaveLength(2);\n    expect(\n      response.body.entreprises[0].conventions.find(\n        (agreement) => agreement.num === 1090\n      ).slug\n    ).toEqual(\n      \"1090-services-de-lautomobile-commerce-et-reparation-de-lautomobile-du-cycle\"\n    );\n\n    expect(\n      response.body.entreprises[0].conventions.find(\n        (agreement) => agreement.num === 99999\n      ).slug\n    ).toBeUndefined();\n  });\n\n  test(\"Call retrieving agreement not in elastic from an enterprise\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({\n        entreprises: [\n          {\n            conventions: [\n              {\n                idcc: 123456,\n              },\n            ],\n          },\n        ],\n      }),\n      status: 200,\n    };\n\n    const expectedResponse = {\n      entreprises: [\n        {\n          conventions: [\n            {\n              num: 123456,\n            },\n          ],\n        },\n      ],\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body).toEqual(expectedResponse);\n  });\n\n  test(\"Call retrieving enterprise without conventions\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({\n        entreprises: [\n          {\n            activitePrincipale:\n              \"Entretien et réparation de véhicules automobiles\",\n            conventions: [],\n          },\n        ],\n      }),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body).toEqual(apiEnterpriseResponse.json());\n  });\n\n  test(\"Call retrieving agreements for multiple enterprise\", async () => {\n    const apiEnterpriseResponse = {\n      json: () => ({\n        entreprises: [\n          {\n            conventions: [\n              {\n                idcc: 1090,\n              },\n            ],\n          },\n          {\n            conventions: [\n              {\n                idcc: 1090,\n              },\n            ],\n          },\n        ],\n      }),\n      status: 200,\n    };\n\n    fetch.mockResolvedValueOnce(apiEnterpriseResponse);\n\n    const response = await request(app.callback()).get(\n      \"/api/v1/enterprises?q=AUTOEXPRESS\"\n    );\n\n    expect(response.status).toEqual(200);\n    expect(fetch).toHaveBeenCalledTimes(1);\n    expect(fetch).toHaveBeenCalledWith(\n      `https://api.recherche-entreprises.fabrique.social.gouv.fr/api/v1/search?ranked=true&query=AUTOEXPRESS&convention=true&employer=true&open=true&matchingLimit=0`\n    );\n\n    expect(response.body.entreprises).toHaveLength(2);\n    response.body.entreprises.forEach((enterprise) => {\n      expect(enterprise.conventions).toHaveLength(1);\n      expect(enterprise.conventions[0].num).toEqual(1090);\n      expect(enterprise.conventions[0].slug).not.toBeUndefined();\n    });\n  });\n});\n"],"names":["Koa","fetch","request","Data","routes","app","use","jest","mock","describe","beforeEach","mockReset","test","apiEnterpriseResponse","body","status","mockResolvedValueOnce","response","callback","get","expect","toEqual","toHaveBeenCalledTimes","toHaveBeenCalledWith","text","json","encodeURIComponent","enterpriseApiDataResponse","entreprises","activitePrincipale","conventions","idcc","etablissements","highlightLabel","label","matching","matchingEtablissement","address","siret","simpleLabel","siren","expectedResponse","map","enterprise","filter","doc","num","id","shortTitle","slug","title","url","toHaveLength","find","agreement","toBeUndefined","forEach","not"],"mappings":"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"}